import numpy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import torch
from torch import tensor
matplotlib.use('TkAgg')
from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_auc_score


def dataset():
    adult=pd.read_csv("../dataset/adult.csv")
    print(adult.shape[0])
    return adult
def laplace_mech(v,sensitivity,epslion):
    return v+np.random.laplace(loc=0,scale=sensitivity/epslion)


def test():
    a=tensor([[-0.1074, -0.1030, -0.0251, -0.0942,  0.0100, -0.0057,  0.0345, -0.0380,
          0.0218, -0.0644],
        [-0.0661, -0.0520, -0.0336, -0.0342, -0.0317, -0.0211, -0.0027, -0.0617,
          0.0580, -0.0762],
        [-0.1124, -0.0266, -0.0657, -0.0712, -0.0263, -0.0039,  0.0012, -0.0358,
          0.0364, -0.1067],
        [-0.1017, -0.0537, -0.0604, -0.1124, -0.0372,  0.0213,  0.0350,  0.0094,
          0.0237, -0.0763],
        [-0.1340, -0.0571, -0.0622, -0.0755, -0.0080,  0.0195,  0.0407, -0.0056,
          0.0660, -0.1117],
        [-0.0992,  0.0084, -0.0361, -0.0343, -0.0368,  0.0049,  0.0398, -0.0147,
          0.0286, -0.0961],
        [-0.1105, -0.0615, -0.0635, -0.0420, -0.0347,  0.0302,  0.0594, -0.0402,
          0.0257, -0.0555],
        [-0.1044, -0.0708, -0.0176, -0.1121, -0.0228, -0.0210,  0.0131, -0.0152,
          0.0428, -0.0679],
        [-0.0943, -0.0417, -0.0229, -0.0876,  0.0053,  0.0198, -0.0271, -0.0814,
          0.0243, -0.0741],
        [-0.0799,  0.0060, -0.0279, -0.0847, -0.0008, -0.0105,  0.0261, -0.0471,
          0.0182, -0.0848]])
    print(a.shape)
    return a


def iterate():
    a=np.array(['name', 'age', 'hobby']);
    b=['xhjiang','18','basketball']
    for x,y in zip(a,b):
        print(x+':'+y)
        
def test_1():  
    lb=np.array([[0,0,0,0,0,0,0,0,1,0],
                 [1,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,1,0,0,0,0],
                 [0,1,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,1,0,0,0,0],
                 [0,1,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,1],
                 [0,0,0,0,0,0,0,0,1,0],
                 [0,0,0,0,0,0,0,0,1,0],
                 [0,1,0,0,0,0,0,0,0,0]])
    lb=lb[:,:2]
    print(lb)

def label_binarizes():
    y=tensor([8, 0, 5, 1, 5, 1, 9, 8, 8, 1])
    lb=label_binarize(y.detach().cpu().numpy(),classes=np.arange(5))
    print(lb)
    print(type(lb))

    y_prob=[]
    y_prob_1=np.array([[-0.10741555, -0.10302056, -0.02513576, -0.09418865,  0.00995496,
        -0.00572971,  0.03454386, -0.03802111,  0.02178377, -0.06435619],
       [-0.06610495, -0.05200724, -0.03355704, -0.03418637, -0.03174512,
        -0.02111436, -0.00272903, -0.06167288,  0.05797839, -0.07617822],
       [-0.1124182 , -0.02664744, -0.06569541, -0.07120688, -0.02626044,
        -0.00385977,  0.00124756, -0.03580297,  0.03640467, -0.1066869 ],
       [-0.1016731 , -0.05367375, -0.06040147, -0.11237006, -0.03720706,
         0.02131865,  0.0350358 ,  0.00944382,  0.02366372, -0.07626625],
       [-0.13399015, -0.05710098, -0.0621975 , -0.07546745, -0.00797856,
         0.01949561,  0.04070305, -0.00562936,  0.06595097, -0.11173828],
       [-0.09922166,  0.00839974, -0.03609597, -0.03425523, -0.03678233,
         0.00489262,  0.03976275, -0.01469437,  0.02860722, -0.09605614],
       [-0.11046401, -0.06154525, -0.06351481, -0.0419943 , -0.03468975,
         0.03021842,  0.05939631, -0.04022641,  0.02567236, -0.05549152],
       [-0.10436127, -0.07078193, -0.01757365, -0.11206287, -0.02276216,
        -0.02101417,  0.01305813, -0.01520537,  0.04277146, -0.06792426],
       [-0.09432425, -0.04174179, -0.02289951, -0.0876326 ,  0.00526838,
         0.01982507, -0.02710392, -0.08140839,  0.02430482, -0.07407077],
       [-0.07989965,  0.00597307, -0.02787158, -0.08470121, -0.00081618,
        -0.01054503,  0.02610156, -0.04710525,  0.01818874, -0.08475459]],dtype=numpy.float64)
    y_prob_2=np.array(
      [[-0.10660551, -0.00625692, -0.04299943, -0.07089627,  0.00244047,
        -0.00971771,  0.01405338, -0.04341988,  0.04590091, -0.08539579],
       [-0.10191194, -0.05267422, -0.06434333, -0.05446923, -0.05451824,
         0.03532504, -0.00659602, -0.03981062, -0.00983322, -0.04637343],
       [-0.09620729, -0.05429561, -0.01723361, -0.06143964, -0.02114166,
         0.02063945,  0.03811317, -0.02749638,  0.01103723, -0.06573002],
       [-0.10252128, -0.03192827, -0.05922161, -0.02679271, -0.04014435,
         0.05135176,  0.00775348, -0.04770729, -0.0158146 , -0.0533807 ],
       [-0.08970234, -0.07790434, -0.04332997, -0.12399377, -0.03709634,
        -0.02923251,  0.00570009,  0.01356593,  0.02681143, -0.09003549],
       [-0.10562022, -0.02878556, -0.03176757, -0.05816605, -0.01837871,
         0.02835244, -0.01804615, -0.0338995 ,  0.00155324, -0.05495202],
       [-0.10757565, -0.03995617, -0.05237849, -0.05087903, -0.01939467,
         0.02824168,  0.00551969, -0.07004558,  0.02204697, -0.06020483],
       [-0.10468607, -0.05451477, -0.04914935, -0.07206301, -0.03917714,
         0.03670659, -0.01148536, -0.04908632, -0.00736409, -0.05456135],
       [-0.08757629, -0.03335075, -0.03434856, -0.02847673, -0.02542386,
         0.02029162,  0.03261211, -0.01873992,  0.05833975, -0.10959774],
       [-0.12450237, -0.0706071 , -0.03233295, -0.10109615, -0.04478796,
        -0.01013928,  0.02856646,  0.00459998, -0.00050677, -0.02019214]])
    y_prob_3=np.array(
      [[-0.11142956, -0.04354301, -0.05421996, -0.07951114, -0.00498372,
         0.00119585, -0.00519331, -0.03971477,  0.02166388, -0.08514924],
       [-0.0920305 , -0.03514535,  0.02179712, -0.07221012, -0.05840964,
        -0.00992627,  0.02600466, -0.00894537,  0.04710306, -0.06846804],
       [-0.1116376 , -0.02863636, -0.03275248, -0.12519869,  0.004083  ,
        -0.015625  , -0.03448997, -0.03561795,  0.02717311, -0.03597163],
       [-0.11065603, -0.07042225, -0.05245477, -0.09268704, -0.05133687,
        -0.0014226 , -0.00017858, -0.03646785,  0.03168284, -0.0533959 ],
       [-0.08519258, -0.04401489, -0.02424154, -0.11602017, -0.00149135,
        -0.00469317, -0.01717704,  0.00377035,  0.04046201, -0.04435629],
       [-0.11328938, -0.03453545, -0.02586508, -0.07764266, -0.03929156,
         0.02031968,  0.00857052, -0.03679948,  0.03233941, -0.07141771],
       [-0.09856649, -0.05515625, -0.04637711, -0.00629392, -0.05538804,
         0.02667499, -0.00893179, -0.04419675, -0.00159382, -0.09569995],
       [-0.14090247, -0.05883307, -0.08756557, -0.07942243, -0.03770558,
        -0.02919139, -0.00938423, -0.02775157,  0.04499118, -0.05946284],
       [-0.10667671, -0.07700916, -0.05434844, -0.10488389, -0.01608777,
         0.01162195,  0.01332567,  0.00078211,  0.02516994, -0.075203  ],
       [-0.09955607, -0.04805409, -0.02678779, -0.0559244 , -0.03872333,
        -0.00762822,  0.00393241, -0.01325063,  0.03768618, -0.04997115]])
    y_prob.append(y_prob_1)
    y_prob.append(y_prob_2)
    y_prob.append(y_prob_3)
    print(np.concatenate(y_prob,axis=0))
    print((np.concatenate(y_prob,axis=0)).shape)


def test_02():
    x=np.array([[1,2,3],
                [1.212,1.323,1.3440]],dtype=numpy.float16)
    y_predprob = np.array([[0.9, 0.1], [0.6, 0.4], [0.65, 0.35], [0.2, 0.8]])
    # print(y_predprob)
    y_scores = y_predprob[:, 1]  # 取预测标签为1的概率https://blog.csdn.net/A__tree/article/details/107742766
    print(y_scores)

def test_03():
    y_true=[0,1,1,0,1,0]
    y_scores = [0.1,0.8,0.6,0.4,0.7,0.2]
    auc_scores=roc_auc_score(y_true,y_scores)
    print(auc_scores)

if __name__ == '__main__':
    # adult=dataset()
    # epslion=.01
    # plt.plot([laplace_mech(adult['age'].clip(lower=0,upper=i).sum(),i,epslion) for i in range(100)])
    # plt.xlabel("age")
    # plt.ylabel("总和求值")
    # plt.show()

    # a=test()
    # y=tensor([8, 9, 8, 8, 8, 9, 8, 0, 5, 8])
    # z=torch.sum(torch.argmax(a,dim=1)==y)
    # x=0
    # yy=0
    # x += z.item()
    # yy += y.shape[0]
    # print(yy)

    # iterate()

    # test_1()

    # label_binarizes()

    # test_02()

    test_03()

